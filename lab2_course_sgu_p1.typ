= Структура программы

== Теоритические сведения

Для небольших EXE-программ с тремя сегментами типична следующая
структура:

```
.model small ;Модель памяти SMALL использует сегменты размером не более 64Кб
.stack 100h ;Сегмент стека размером 100h (256 байт)
.data ;Начало сегмента данных
;Определение переменных
.code ;Начало сегмента кода
start: ;Точка входа в программу start
;Предопределенная метка @data обозначает
;адрес сегмента данных в момент запуска программы,
mov AX, @data ;который сначала загрузим в AX,
mov DS, AX ;а затем перенесем из AX в DS
;Текст программы
mov AX,4C00h
int 21h
end start
```

Структура COM-программ аналогична структуре EXE-программ за тем
исключением, что в COM-программах используется лишь один сегмент
данных.

```
.model tiny ;Модель памяти TINY, в которой код, данные и стек
;размещаются в одном и том же сегменте размером до 64Кб
.code ;Определение сегмента кода
org 100h ;Устанавливает значение программного счетчика в 100h
start:
;Текст программы
;Определение переменных
end start
```

= Занесение цифры в регистр

Поместите цифру 3 в регистр BX, используя команду MOV:

== Теоритические сведения

Команда MOV -- основная команда для пересылки одного байта или
слова:
+ Из памяти в регистр
+ Из регистра в память
+ Из регистра в регистр
+ Также можно записать в регистр или память число (непосредственный
  оператор)

В машинном коде MOV может преобразовываться в целое семейство
команд. На рисунке ниже представлена схема допустимых операций:

#image("images/6.GIF")

Примеры использования:

```
MOV Data, DI
MOV BX,CX
MOV DI,Index
MOV Start_Seg,DS
MOV ES,Buffer
MOV Days,356
MOV DI,0
```
