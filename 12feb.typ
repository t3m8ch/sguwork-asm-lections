= Организационные моменты

Посещение лекций -- 10 баллов (можно пропустить одну лекцию)

Реферат -- 10 баллов

== Литература

+ Бройло, Архитектура ЭВМ и систем
+ Калашников, Ассемблер это просто
+ Зубков, Ассемблер -- язык неограниченных возможностей

= Лекция

Программное обеспечение обычно делят на
+ Прикладное (проблемное) ПО -- библиотеки, комплексы
  программ, предназначенных для решения задач из какой-то
  конкретной области применения ЭВМ
+ Системное ПО -- обеспечивает автоматизацию разработки,
  автоматическое выполнение ПО и синхронизацию работ
  всех устройств вычислительных систем, комплексов и сетей.

Системное ПО делят на
+ Управляющие системы -- обеспечивают автоматическую работу
  системы, постоянно находятся в ОЗУ и называются резидентными.
  Управляющие системные программы, подргужаемые в ОЗУ перед
  их выполнением по мере необходимости называют транзитными.
  Управляющие системные программы используют для создания ПО,
  модификации существующих и используются, Как приложения ОС.
+ Обрабатывающие системы

Системное программное обеспечение может быть разработано как
на ЯП высокого уровня (например, C/C++) или на ЯП низкого уровня.
Программа, написанная на машинозависимом языка хорошим
программистом, всегда будет более эффективной, чем ПО,
написанное на ЯП высокого уровня.

Существуют различные классификации ЯП

== Архитекура ПК

Архитектура ПК с точки зрения программиста -- это набор программно
доступных средств.

Включает в себя:
+ Организационная структура -- набор блоков устройств,
  объединённых в единую системы
+ Функциональная структура -- обеспечивает автоматическую
  работу системы

Современные ПК используют магистрально модульный принцип
построения, когда центральные магистрали системной шине
с помощью стандартного интерфейса подключаются все устройства.

В системную шину входят:
+ Адресная шина -- от ЦП, однонаправленная
+ Шина данных -- и от ЦП, и до ЦП, двунаправленная
+ Шина управления - есть и однонаправленные и двунаправленные
  линии связи

Шина -- набор линий связи, по которым информация передаётся от
одного из источников к одному или нескольким приёмникам.

Адреса передаются от ЦП, шина однонаправленная, данные передаются
и от ЦП, и до ЦП (двунаправленная шина), в шине управления есть
и однонаправленная и двунаправленная линии связи

Внешние устройства работают значительно медленнее ЦП, поэтому в
архитектуры включены каналы прямого доступа к памяти и
так называемые интерфейсные блоки для обеспечения параллельной
работы ЦП и внешних устройств, включающие в себя управляющие
блоки внешними устройствами.

Для синхронизации работы всех устройств используются система
прерываний. Например, если некоторому устройству требуются
работа процессора, это устройство посылает специальный сигнал
прерывания, контроллер прерываний определяет, нет ли прерываний
с более высоким приоритетом и передаёт этот сигнал ЦИ или
задерживает его на какое-то время. Процессор, если это возможно,
обрабатывает прерывание (выполняет системую обрабатывающую программу)

Типы прерываний:
+ Внешние/внутреннее
+ Маскирование/немаскирование -- прерывание можно закрыть
+ ...

== Архитектура процессора

Изучаем 32-разрядные процессоры Intel (ix86).
После включения в сеть процессор в реальный режим
работы процессора и большинство ОС сразу переходят
в защищённый режим, который обеспечивает многозадачность,
распределение всех ресурсов между задачами, и в таких
ОС у программиста есть возможность работать в режиме
виртуальных машин.

Регистр -- набор из n-устройств, позволяющих хранить
n-разрядное двоичное число:

+ 4 регистра общего назначения: EAX EBX ECX EDX
  для 32 бит, AX BX CX DX для 16 бит, AL/AH BL/BH
  CL/CH DL/DH для 8 бит (в этих регистрах можно
  и данные, и адреса, они имеют собственные имена:
  AX называют аккумулятором, в него чаще всего
  записывают результат, CX называют счётчиком,
  он используются в командах организации циклов,
  в командах работы со строками, DX называют регистром
  данных, BX называют базовым регистром, базой, который
  используется при сложно адресации операндов)
+ 4 регистра указателей и индексов: SI DI SP BP для 16
  бит, ESI EDI ESP EDP для 32 бит, SI DI называют
  индексом источника/индексом приёмника (индексными регистрами),
  SP BP -- указатели для работы со стеком (SP -- указатель на
  вершиину стека, stack pointer), BP -- base pointer.
+ 6 регистров называются сегментными регистрами,
  они используются при работе с сегментированной памятью,
  для определения адреса сегмента.

Процессор может работать с ОЗУ, как с одним непрерывным
массивом байтов, этот режим называется режимом flat
(модель памяти flat).

Также процессор может работать с памятью, разделённой
на участки, называемые сегментами. В этом случае
физический адрес байта состоит из двух частей:
+ из адреса начала сегмента
+ и адреса внутри сегмента, называемого смещением, для
  получения адреса начала сегмента как раз и используются
  регистры DS ES FS JS для сегмента данных, CS определяет
  кодовый сегмент, SS стековый сегмент.

ОС может размещать сегменты в ОЗУ случайным образом и
может временно записывать их на диск, если ОЗУ не
хватает. Перечисленные регистры ещё называют селекторы.
С каждым селектором связан программно недоступный
регистр, называемый дескриптором, в котором как раз
для защищённого режима и хранится адрес начала сегмента,
его размер и другие характеристики. В реальном режиме
размер сегмента фиксирован, равен 64 КБайтам, адрес
сегмента кратен 16, в 16-ичной системе может быть
записан следующим образом: XXXX0, где X - 16-ичная цифра.
Эти цифры и хранятся в сегментном регистре. В защищённом
режиме размер сегмента может изменяться до 4Гбайт.

Сегментных регистров всего 6, но программист может
в нужный ему момент изменить содержимое сегментного
регистра и попасть на другой участок памяти. Например,
есть основная программа и много подпрограмм. Программа
может храниться в одном кодовом сегменте, а подпрограмма
в другом кодовом сегменте.

Сегмент стека реализован в Ассемблере таким образом,
что при добавлении элемента в стек содержимое указателя
на вершину стека уменьшается. Адрес начала сегмента стека
хранится в регистре SS и определяется ОС автоматически,
стек растёт от максимально возможного значения (вниз
головой). Стек используются для временного хранения
данных, для организации работы с подпрограммами, в том
числе рекурсивными, для передачи фактических параметров
и для хранения локальный параметров и так далее.
SP -- указатель на вершину стека. Если в стеке хранятся
не только фактические параметры, но и локальные, то
после загрузки фактических параметров содержимое SP
помещается в BP и мы используем BP для обращения к
локальным параметрам. BP + k или BP - n, где каждый k и
n зависят от количества параметров и их размеров.

Стек растёт вниз в головой. Такой режим необходим в
flat-режима. Программа начинается с младших адресов,
а стек со старших.

IP - instruction pointer, указатель команд. Он содержит
адрес следующей исполняемой команды.

Регистры флаг. FLAGS или EFLAGS определяет состояние
программы и процессора в каждый текующий момент
времени.

(тут должна быть картинка)

1, 3, 5, 15 и 21 не используются.

Флаг может быть установлен в 1 или сброшен в 0.

+ CF - флаг переноса. 1, если при выполения сложения
  происходит перенос за разрядную сетку, а при
  вычитании требуется заём
+ PF - флаг чётности (паритета). 1, если в младшем байте
  результата оказывается чётное число единиц.
+ AF - флаг полупереноса. 1, если при сложении
  происходит перенос из 3 в 4 разряд, а при вычитании
  требуется заём из 4 в 3 разряд.
+ ZF - флаг нуля. 1, если все биты результата окажутся
  равными нулю.
+ SF - флаг знака. Всегда равен знаковому разряду
  результата, 0 если положительный, 1 если
  отрицательный.
+ TF - флаг трассировки. Установленный в единицу
  переводит выполнение программы в режим отладки.
+ IF - флаг прерывания. Позволяет приостановить
  прерывание, установленный в 1.
+ OF - флаг переполнения. 1, если результат операции
  привысил максимально допустимый для данной разрядной
  сетки.
+ DF - флаг направления. Определяет направление
  обработки строк. Установленный в 1 позволяет
  обрабатывать строки справа налево, сброшенный
  в ноль определяет обработку строк начинает
  с младших адресов к старшим (слева направо).
  При этом этот флаг определяет автоматическое изменение
  содержимого индексных регистров. При =0, индексные
  регистры увеличиваются на размер операндов, при =1,
  то уменьшаются.
+ EO/PL - уровень привелегий ввода/вывода.
+ NT - флаг вложенной задачи.
+ RF - флаг маскирования прерываний.
+ VM - флаг виртуальных машин.
+ AC - флаг выравнивания операндов.

Если флаг устанавливается автоматически, это состояние программы.
Если флаг устанавливается программистом, это состояние процессора.
