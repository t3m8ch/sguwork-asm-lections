= Часть 1. Архитектура процесора 80x86

== Теоритические сведения

В настоящее время наиболее распространены IBM-совместимые
компьютеры, с процссорами, которые совместимы с Intel 8086.
То есть любые программы на этом процессоре можно исполнить
на более современном процессоре. Изучение этого процессора
является базой для изучения более новых процессоров.

#image("images/1.GIF")

Структура Intel 8086 разделена на две логические части:
+ Блок исполнения (Execution Unit -- EU)
+ Блок интерфейса шин (Bus Interface Unit -- BIU)

Интерфейс -- совокупность средств, обеспечивающих сопряжение
устройств и программных модулей как на физическом уровне, так и
на логическом.

В состав EU входят:
+ Арифметическо-логические устройство (ALU)
+ Устройство управления CU
+ 10 регистров

Устройства управления CU обеспечивают обработку команд, выполнение
арифметических и логических операций.

В BIU входят:
+ Устройство управления шинами
+ Блок очереди команд
+ Регистры сегментов

Функции BIU:
+ Управление обменом данными с EU, памятью и внешними устройствами
  ввода-вывода
+ Адресация памяти
+ Выборка команд (осуществляется с помощью блока очереди команд
  Queue, которые позволяют выбирать команды с упреждением).

С точки зрения программиста процессор 8086 состоит из
+ 8 регистров общего назначения
+ 4 сегментных регистров
+ Регистра адреса команд (счётчика команд)
+ Регистра флагов

Процессор выставляет на шину адреса выбираемых из памяти
команд (или данных), которые поступают в шестибайтный буфер
(очередь команд), а затем исполняются.

Адресную шину можно представить в виде 20 проводников, в каждом
из которых может протекать либо напряжение заданного уровня
(сигнал 1), либо не протекать (сигнал 0).

Минимально адресуемая ячейка памяти - 1 байт (8 бит).
Биты в байте нумеруются справа налево цифрами 0..7.

Двухбайтовое поле образует шестнадцатиричное слово (Word),
биты в котором нумеруются справа налево цифрами 0..15. Байт
с меньшим адресом считает младшим.

Четырехбайтовое поле -- это двойное слово (Double word),
шестнадцатибайтовое -- параграф (paragraph).

Как правило, при записи двоичного числа в конец добавляют
латинскую B или b, а при записи шестнадцатиричного числа --
латинскую H или h.

=== Регистры

Процессор 8086 содержит 14 шестнадцатиразрядных регистра, которые
используются для управления исполнением команд, адресации и
выполнения арифметическх операций. Регистр, содержащий одно слово,
адресуется по имени.

==== Регистры общего назначения

К ним относятся AX, BX, CX и DX. Каждый из них поделён на две
части. К примеру AX поделён на AL -- старшая часть и AH -- младшая.
Для других регистров аналогично.

+ AX -- служит для временного хранения данных, часто используется
  при выполнении арифметических и логических операций.
+ BX -- часто используют для хранения адреса в области памяти, но
  также используется, как вычислительный регистр.
+ CX -- в основном используется, как счётчик (в нём хранится
  число повторений одной команды или фрагмента программы), но также
  иногда испольузется для временного хранения данных.
+ DX -- главным образом используется для временного хранения данных,
  часто служит средством пересылки данных между разными
  программными системами, в качестве расширителя аккумулятора для
  вычислений повышенной точности, а также при умножении и делении.

==== Регистры для адресации

В процессоре существуют 4 регистра, которые используются для
адресации памяти:
+ Регистр BX -- базовый регистр, может использоваться так же в
  качестве регистра общего назначения
+ Регистр BP -- указатель базы
+ Регистр SI -- индекс источника
+ Регистр DI -- индекс результата

Отдельные байты этих трёх регистров недоступны. Любой из этих
4 регистров может использоваться для хранения адреса памяти,
а команды, работающие с адресами памяти, могут обращаться
в эти регистры за ними. При адресации базовые и индексные
регистры могут быть использованы в различных комбинациях.
Разнообразные способы сочетания в командах этих регистров и
других величин называются способами или режимами адресации.

==== Регистры сегментов

Имеются 4 регистра сегментов, с помощью которых память можно
организовать в виде совокупности сегментов. Этими регистрами
являются:

+ CS -- регистр программного сегмента (сегмена кода, code segment)
  определяет местоположение части памяти, содержащей программу,
  т. е. выполняемые процессором команды;
+ DS -- регистр информационного сегмента (сегмента данных,
  data segment) определяет местоположение части памяти,
  предназначенной для хранения данных;
+ SS -- регистр стека (сегмента стека, stack segment) определяет
  местоположение части памяти, которая используется, как
  системный стек;
+ ES -- регистр расширенного сегмента (дополнительного сегмента,
  extended segment) указывает дополнительную область памяти,
  которая используется для хранения данных.

Эти 4 области памяти могут быть расположены где угодно на
физической машинеы.

==== Регистр указателя стека

Указатель стека SP -- это шестнадцатибитный регистр, который
определяет смещение текущей вершины стека. Используется вместе
с регистром стека SS для формирования физического адреса
стека.

Стек всегда растёт в сторону уменьшения адреса. То есть, при
добавлении слова SP уменьшается на 2, а при извлечении --
увеличивается на 2.

==== Регистр указателя команд IP

Иначе называется счётчиком команд. Имеет размер 16 бит и хранит
адрес некоторой ячейки памяти -- начало следующей команды.
Используется вместе с CS для формирования 20-битного физического
адреса команды.

==== Регистр флагов

Флаги -- это отдельные биты, принимающие значения 0 или 1.
Регистр флагов (признаков) содержит девять активных битов
(из 16). Каждый бит этого регистра имеет своё значние.
Некоторые биты устанавливаются в результате выполнения команды,
некоторые другие устанавливаются автоматически и отражают
текущее состояние процессора.

+ OF (overflow flag) -- флаг переполнения. Устанавливается
  автоматически в значение 1, если при выполнении арифметической
  операции произошло переполнение.
+ DF (direction flag) -- флаг направления. Устанавливается
  программистом в значение 1, если строка обрабатывается справа
  налево (автоматический декремент в командах обработки строк),
  в значение 0, если наоборот.
+ IF (interrupt flag) -- флаг прерывания. Устанавливается
  программистом в значение 1, если мы хотим разрешить прерывания,
  если 0, то распознаются лишь немаскированные прерывания.
+ SF (sign flag) -- флаг знака. Устанавливается автоматически
  в значение 1, если старший бит результата равен 1 (то есть
  получилось отрицательное число), в значение 0 в противном случае.
+ ZF (zero flag) -- флаг нуля. Устанавливается автоматически в
  значение 1, если результат равен 0.
+ AF (auxiliary flag) -- признак дополнительного пересноа.
  Устанавливается автоматически в значение 1, если выполняется
  команда десятичного сложения и вычитания при возникновении
  переноса или заёма между полубайтами.
+ PF (parity flag) -- признак чётности. Устанавливается
  автоматически в значение 1, если результат имеет чётное число
  единиц.
+ CF (carry flag) -- признак переноса. Устанавливается
  автоматически в значение 1, если имеет место перенос
  или заём из старшего бита результата; он полезен
  для произведения операций над числами в несколько слов,
  которые сопряжены с переносами и заёмами из слова в слово.
+ Остальные биты явлются зарезервированными.

*Отличия между CF и OF*:
+ CF используется при операциях над безнаковыми числами
+ OF используется при операциях над знаковыми числами (например,
  из-за переполнения результат сложения двух положительных
  чисел будет отрицательным)


=== Сегменты, принцип сегментации

Числа, устанавливаемые на адресной шине, называются адресами.
По сути, это номер ячейки ОЗУ. Размер ячейки ОЗУ равен 8 битам
или 1 байту. Изучаемый нами процессор использует 16-разрядные
регистры для адресации памяти, что даёт доступ к $2^16 = 65536$
бит памяти.

Такой блок непосредственно адресуемой памяти называется сегментом.
Любой адрес памяти формируется из:
+ Адреса сегемента -- всегда кратен 16 и начинается с границы
параграфа.
+ Адреса ячейки внутри сегмента -- также называется смещением.

Для адресации большего объёма памяти используется специальная
операция, называемая вычислением абсолютного (эффективного)
адреса.

При выборе следующей команды, которая будет исполняться,
используется содержимое регистра IP. Этот адрес является
исполнительным. Регистр является шестнадцатиразрядным =>
адрес тоже содержит 16 разрядов. Однако адресная шина содержит
20 линий связи.

Сегментные регистры CS, DS, SS, ES имеют размер 16 бит. Значения,
которые там хранятся, называют базовым адресом сегмента. CPU
объединяет базовый адрес и исполнительный следующим образом:
+ Базовый адрес расширяется 4-мя нулевыми битами в младших
  разрядах
+ Потом к полученному адресу прибавляется исполнительный адрес.

Полученный адрес называют абсолютным или физическим адресом.

Существует три вида сегментов:
+ Сегмент кода -- содержит машинные команды, адресуется CS
+ Сегмент данных -- содержит константы и рабочие области,
  адресуется DS
+ Сегмент стека -- содержит адреса возврата в точку вызова
  подпрограмм, адресуется SS

При записи команд на языке ассемблера принято указывать адреса
с помощью следующей конструкции:

`адрес сегмента>:<смещение>` или
`сегментный регистр>:<адресное выражение>`

=== Стек

Во многих случаях, программе требуется временно сохранить
информацию. Для этого используется стек.

Стек -- область данных для временного хранения данных, в которую
по средствам специальных команд можно записать отдельные слова
(но не байты).

Элементы располагаются со дна (с максимального адреса) и по мере
добавления адрес уменьшается.

#image("images/2.GIF")

Адрес верхнего элемента хранится в регистре SP. Адрес сегмента
стека записывается в регистр SS. По итогу SS:SP описывает
адрес доступной ячейки стека. В исходном состоянии SP указывает
на адрес, который находится под дном стека и не входящий в сам
стек.

Для помещения значения в стек используется команда PUSH. Для
извлечения используется команда POP. В качестве операнда может
выступать регистр или ячейка памяти.

Размер стека зависит от того, насколько он интенсивно используется
в программе. При этом стек может автоматически использоваться ОС.
Во время прерывания в стек кладётся адрес возврата, после чего
DOS помещает туда значения регистров и прочую информацию о
прерванной программе. Поэтому, даже если программа не использует
стек, он всё равно должен быть размеров в несколько десятков
слов.
